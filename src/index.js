'use strict';

var http = require('http');
var serverHandler = require('./http-handlers/ok.js');
var socketHandler = require('./socket-handler');
var mapGenerator = require('rule-based-map-generator');

var isFunction = require('mout/lang/isFunction');
var isNumber = require('mout/lang/isNumber');
var isObject = require('mout/lang/isObject');

/**
 * @function createServer
 * @description creates a block server with a given world instance and listens in a given port
 *
 * @param  {Number} port                    The port where the server will listen to
 * @param  {World}  worldInstance           A world instance created by the rule-based-map-generator
 *
 * @return {BlockerServer}
 *         {BlockerServer.start}            Function to start the server
 *         {BlockerServer.setPreProcessor}  Function to set a pre processor for each event received
 *         {BlockerServer.setPostProcessor} Function to set a post processor for each event emmited
 *         {BlockerServer.close}            Function to close the server
 */
function createServer(port, worldInstance) {
    var app, io;
    var preProcessorFn, postProcessorFn;
    var hasStarted = false;

    // validate input
    if (!isNumber(port)) {
        throw new Error('port is mandatory and must be a {Number}');
    }

    if (!isObject(worldInstance)) {
        throw new Error('worldInstance is mandatory and must be a world instance {Object} generated by rule-based-map-generator');
    }

    function setPreProcessor(fn) {
        if (!isFunction(fn)) {
            throw new Error('preProcessor must be a {Function}');
        }
        preProcessorFn = fn;
    }

    function setPostProcessor(fn) {
        if (!isFunction(fn)) {
            throw new Error('postProcessor must be a {Function}');
        }
        postProcessorFn = fn;
    }

    function preProcess(event, data) {
        return preProcessorFn ? preProcessorFn(event, data) : data;
    }

    function postProcess(event, data) {
        return postProcessorFn ? postProcessorFn(event, data) : data;
    }

    function start() {
        if (hasStarted) {
            throw new Error('Server has been already started');
        }

        app = http.createServer(serverHandler);
        //TODO: fail more gracefully when port is in use
        app.listen(port);

        // start world instance if it has not started yet
        if (!worldInstance.hasStarted()) {
            worldInstance.start();
        }

        io = socketHandler(app, worldInstance, preProcess, postProcess);
        hasStarted = true;
    }

    function close() {
        if (!hasStarted) {
            throw new Error('Trying to close a non started server');
        }

        // TODO: debug this. server still responds after closing.
        io.close();
        app.close();
        hasStarted = false;
    }

    // public
    return {
        start: start,
        setPreProcessor: setPreProcessor,
        setPostProcessor: setPostProcessor,
        close: close
    };
}

module.exports = {
    createServer: createServer,
    generator: mapGenerator
};
